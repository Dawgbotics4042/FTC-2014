float SINSS[91] = {0.0 , 0.01745 , 0.03489 , 0.05233 , 0.06975 , 0.08715 , 0.10452 , 0.12186 , 0.13917 , 0.15643 , 0.17364 , 0.1908 , 0.20791 , 0.22495 , 0.24192 , 0.25881 , 0.27563 , 0.29237 , 0.30901 , 0.32556 , 0.34202 , 0.35836 , 0.3746 , 0.39073 , 0.40673 , 0.42261 , 0.43837 , 0.45399 , 0.46947 , 0.4848 , 0.49999 , 0.51503 , 0.52991 , 0.54463 , 0.55919 , 0.57357 , 0.58778 , 0.60181 , 0.61566 , 0.62932 , 0.64278 , 0.65605 , 0.66913 , 0.68199 , 0.69465 , 0.7071 , 0.71933 , 0.73135 , 0.74314 , 0.7547 , 0.76604 , 0.77714 , 0.78801 , 0.79863 , 0.80901 , 0.81915 , 0.82903 , 0.83867 , 0.84804 , 0.85716 , 0.86602 , 0.87461 , 0.88294 , 0.891 , 0.89879 , 0.9063 , 0.91354 , 0.9205 , 0.92718 , 0.93358 , 0.93969 , 0.94551 , 0.95105 , 0.9563 , 0.96126 , 0.96592 , 0.97029 , 0.97437 , 0.97814 , 0.98162 , 0.9848 , 0.98768 , 0.99026 , 0.99254 , 0.99452 , 0.99619 , 0.99756 , 0.99862 , 0.99939 , 0.99984 , 1.0};

float findSin(int ang)
{
	if(ang >= 0 && ang <= 90)
		return SINSS[ang];
	else if(ang > 90 && ang <= 180)
		return SINSS[180 - ang];
	else if(ang > 180 && ang <= 270)
		return -1 * SINSS[ang - 180];
	else if(ang > 270 && ang <= 360)
		return -1 * SINSS[360 - ang];
	return 0.0;
}


float findCos(int ang)
{
	ang = ang + 90;
	if(ang > 360)
		ang = ang - 360;
	if(ang >= 0 && ang <= 90)
		return SINSS[ang];
	else if(ang > 90 && ang <= 180)
		return -1 * SINSS[180 - ang];
	else if(ang > 180 && ang <= 270)
		return -1 * SINSS[ang - 180];
	else if(ang > 270 && ang <= 360)
		return SINSS[360 - ang];
	return 0.0;
}
