#pragma config(Sensor, S1,     ,               sensorI2CCustom)
#pragma config(Sensor, S2,     ,               sensorI2CCustom)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "Drive.h"
#include "JoystickDriver.c"
#include "SQRT.h"	//array of square root values

//initializes Gyro
void initializeRobot()
{
	//initGyro(S2);
	Servos_SetPosition(S1, 5, 1, 154);
}

//reads gyro position from a file written in autonomous?
int getOffset()
{
	TFileHandle hFileHandle;
	TFileIOResult nIoResult;
	int length = 3;
	string name = "data.txt";
	OpenRead(hFileHandle, nIoResult, name, length);
	if (nIoResult != 0)
		return 0;

	long offset;
	ReadLong(hFileHandle, nIoResult, offset);

	Close(hFileHandle, nIoResult);

	return offset;
}

/*int findSQRT(int a, int b)
{
	int first = a ? a < b : b;
	int second = b ? a < b : a;

	int answer = 0;

	for (int i = 0; i<first; i++) {
		answer += 129-i;
	}
	answer += second;
	return SQRT[answer];
	if (a>120) return 127;
	if (b>120) return 127;
	if (a>=90 && b>=90) return 127;
	if (a+b > 180)
	return
}*/

byte getSqrt(byte i, byte j)  //does square root
{
		i = abs(i) ? abs(i) <= 127 : 127;
		j = abs(j) ? abs(j) <= 127 : 127;
    byte large = i ? i > j : j;
    byte small = i ? i < j : j;
    if (large >= 127)
        return 127;
    if (small >= 90 && large >= 90)
        return 127;
    small = (int)round(small/3);
    large = (int)round(large/3);
    if (small != 0)
        small -= 2;
    if (large != 0)
        large -= 2;

    return SQRT[large][small];
}

task main()
{
		initializeRobot();
    waitForStart();

    //int curGyro;
    //int oldGyro;

    //oldGyro = getGyroData(S2);

		movData data;

		//int offset = getOffset();
		//offset = 0;

		//bNxtLCDStatusDisplay = false;

    while( true )
    {
    	  getJoystickSettings(joystick);
    		// Control

    		//grab servos
    		//raise motors
    		//release balls
    		//run intake
    		/*if (intake == 0)
    			Motors_SetSpeed(S1, 1, 1, 0);
    		if (intake == */

    		//if (joy2Btn(3) == 1) {  //lift up
    		if (joystick. joy2_TopHat == 0 || joystick. joy2_TopHat == 1 || joystick. joy2_TopHat == 7) {
    			Motors_SetSpeed(S1, 1, 1, 70);
  				Motors_SetSpeed(S1, 1, 2, -70);
  			} else if (joystick. joy2_TopHat == 3 || joystick. joy2_TopHat == 4 || joystick. joy2_TopHat == 5){
    	  	Motors_SetSpeed(S1, 1, 1, -34);
  				Motors_SetSpeed(S1, 1, 2, 34);
  			}else {
  				Motors_SetSpeed(S1, 1, 1, 0);
  				Motors_SetSpeed(S1, 1, 2, 0);
  			}

  			if (joy2Btn(4) == 1)  //ball intake
  				Motors_SetSpeed(S1, 4, 1, 127);
  			else if (joy2Btn(2) == 1)
  				Motors_SetSpeed(S1, 4, 1, -127);
  			else
  				Motors_SetSpeed(S1, 4, 1, 0);

  			if (joy2Btn(3) == 1)  //kickstand knocker-downer
  				Servos_SetPosition(S1, 6, 1, 255);
  			if (joy2Btn(1) == 1)
  				Servos_SetPosition(S1, 6, 1, 0);

  			if (joy2Btn(5) == 1)  //kickstand knocker-downer
  				Servos_SetPosition(S1, 6, 1, 0);
  			if (joy2Btn(6) == 1)
  				Servos_SetPosition(S1, 6, 1, 156);

  			//if (joy2Btn(1) == 1)
  			//	Servos_SetPosition

    		// Drive Base
        data.xComp = joystick.joy1_x1;
        data.yComp= joystick.joy1_y1-1;
        data.rot = -1*(joystick.joy1_x2+1);

        //data.xComp = 0;
        //data.yComp = 0;
        //data.rot = 0;

        data.xComp = (data.xComp != -128 ? data.xComp : data.xComp+1);
        data.yComp = (data.yComp != -128 ? data.yComp : data.yComp+1);
        data.rot = (data.rot != -128 ? data.rot : data.rot+1);

        //curGyro = getGyroData(S2);
          //this block of if statements is the controller dead-zone
        if (data.rot < 10 && data.rot > -10)
            data.rot = 0;
        if (data.xComp < 10 && data.xComp > -10)
            data.xComp = 0;
        if (data.yComp < 10 && data.yComp > -10)
            data.yComp = 0;

        //oldGyro = useGyro(data, oldGyro, curGyro, offset);

       // byte speed = getSqrt(data.xComp, data.yComp) + abs(data.rot);
        int speed = (int)(sqrt(data.xComp*data.xComp + data.yComp*data.yComp) + abs(data.rot)); //finds speed (dist formula)

        if (speed > 127) speed = 127; //Regulates speed

        //eraseDisplay();
        //nxtDisplayTextLine(1, "x: %d", data.xComp);
        //nxtDisplayTextLine(2, "y: %d", data.yComp);
        //nxtDisplayTextLine(3, "rot: %d", data.rot);

        drive(data, (byte)speed);
    }
}
